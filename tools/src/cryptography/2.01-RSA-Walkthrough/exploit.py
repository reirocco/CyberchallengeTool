from Crypto.Util.number import bytes_to_long, inverse
from pwn import *
import re
import os
import subprocess
from sympy import factorint

if __name__ == '__main__':
    r = remote('rsa.challs.cyberchallenge.it', 9040)
    #   read initial string
    print(r.recvline())
    print(r.recvline())

    #   Level 1
    raw = r.recv().decode().replace('\n', ' ')
    print(raw)
    g = re.search("Level 1 p = ([0-9]+) q = ([0-9]+)", raw)
    r.send((str(int(g.group(1)) * int(g.group(2))) + "\n").encode())  # n = p*q

    #   Level 2
    print(r.recvline().decode().strip())
    print(r.recvline().decode().strip())
    data = r.recvline().decode().strip()
    print(data)
    message = data.split(" = ")[1]
    data = r.recvline().decode().strip()
    print(data)
    r.send((str(bytes_to_long(message.encode('utf-8'))) + '\n').encode())

    #   Level 3
    print(r.recvline().decode().strip())
    print(r.recvline().decode().strip())
    p = int((r.recvline().decode().strip()).split(" = ")[1])  # p
    q = int((r.recvline().decode().strip()).split(" = ")[1])  # q
    m = int((r.recvline().decode().strip()).split(" = ")[1])  # m
    e = int((r.recvline().decode().strip()).split(" = ")[1])  # e
    print(r.recvline().decode().strip())  # c = ?
    #   find c with m^e % n
    cyphertext = pow(m, e, p * q)
    r.send((str(cyphertext) + '\n').encode())

    #   Level 4
    print(r.recvline().decode().strip())
    print(r.recvline().decode().strip())
    p = int((r.recvline().decode().strip()).split(" = ")[1])  # p
    q = int((r.recvline().decode().strip()).split(" = ")[1])  # q
    e = int((r.recvline().decode().strip()).split(" = ")[1])  # e
    print(r.recvline().decode().strip())  # tot(n) totient
    r.send((str((int(p) - 1) * (int(q) - 1)) + '\n').encode())

    #   Level 5
    print(r.recvline().decode().strip())
    print(r.recvline().decode().strip())
    r.send((str(pow(e, -1, (p - 1) * (q - 1))) + '\n').encode())

    #   Level 5
    print(r.recvline().decode().strip())
    print(r.recvline().decode().strip())
    p = int((r.recvline().decode().strip()).split(" = ")[1])  # p
    q = int((r.recvline().decode().strip()).split(" = ")[1])  # q
    e = int((r.recvline().decode().strip()).split(" = ")[1])  # e
    c = int((r.recvline().decode().strip()).split(" = ")[1])  # c
    print(r.recvline().decode().strip())  # m= ?
    # print(factorint(p * q)) # for factorization
    tot_n = (q - 1) * (p - 1)
    d = inverse(e, tot_n)
    m = pow(c, d, p * q)
    r.send((str(m) + '\n').encode())
    print(r.recvline().decode())
    print(r.recvline().decode())
    print(r.recvline().decode())
